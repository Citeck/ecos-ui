diff --git a/components/base/Base.js b/components/base/Base.js
index 2da74da..bc1bf60 100644
--- a/components/base/Base.js
+++ b/components/base/Base.js
@@ -1830,13 +1830,7 @@ var BaseComponent = /*#__PURE__*/function (_Component) {
         var errorMessage = this.ce('p', {
           class: 'help-block'
         });
-        var entityRegex = /&(:?amp|lt|gt|quot|#39|#x2F);/gi;
-
-        if (message.match(entityRegex)) {
-          errorMessage.innerHTML = message;
-        } else {
-          errorMessage.appendChild(this.text(message));
-        }
+        errorMessage.appendChild(this.text(message));
 
         this.errorElement.appendChild(errorMessage);
       } // Add error classes
@@ -2290,7 +2284,10 @@ var BaseComponent = /*#__PURE__*/function (_Component) {
   }, {
     key: "hasChanged",
     value: function hasChanged(newValue, oldValue) {
-      if ((newValue === undefined || newValue === null) && (oldValue === undefined || oldValue === null || this.isEmpty(oldValue))) {
+	    if (
+        ((newValue === undefined) || (newValue === null)) &&
+        ((oldValue === undefined) || (oldValue === null))
+      ) {
         return false;
       }
 
@@ -2458,7 +2455,7 @@ var BaseComponent = /*#__PURE__*/function (_Component) {
       } // No need to check for errors if there is no input or if it is pristine.
 
 
-      if (!this.hasInput) {
+      if (!this.hasInput || (!dirty && this.pristine)) {
         return '';
       }
 
@@ -2485,16 +2482,10 @@ var BaseComponent = /*#__PURE__*/function (_Component) {
         return true;
       }
 
-      var error = _Validator.default.check(this, data);
+      const message = this.invalidMessage(data, dirty, true);
+      this.setCustomValidity(message, dirty);
 
-      if (error && (dirty || !this.pristine)) {
-        var message = this.invalidMessage(data, dirty, true);
-        this.setCustomValidity(message, dirty);
-      } else {
-        this.setCustomValidity('');
-      }
-
-      return !error;
+      return message ? false : true;
     }
     /* eslint-disable max-len */
 
@@ -2532,9 +2523,9 @@ var BaseComponent = /*#__PURE__*/function (_Component) {
         this.removeChildFrom(this.errorElement, this.errorContainer);
       }
 
-      if (!dirty && this.pristine) {
-        message = '';
-      }
+      // if (!dirty && this.pristine) {
+      //   message = '';
+      // }
 
       if (message) {
         this.error = {
diff --git a/components/file/File.js b/components/file/File.js
index 1a67315..f26ac8b 100644
--- a/components/file/File.js
+++ b/components/file/File.js
@@ -707,10 +707,10 @@ var FileComponent = /*#__PURE__*/function (_BaseComponent) {
         class: 'alert alert-warning'
       });
 
-      if (!this.component.storage) {
-        hasWarnings = true;
-        warnings.appendChild(this.ce('p').appendChild(this.text('No storage has been set for this field. File uploads are disabled until storage is set up.')));
-      }
+      // if (!this.component.storage) {
+      //   hasWarnings = true;
+      //   warnings.appendChild(this.ce('p').appendChild(this.text('No storage has been set for this field. File uploads are disabled until storage is set up.')));
+      // }
 
       if (!this.support.dnd) {
         hasWarnings = true;
@@ -898,7 +898,7 @@ var FileComponent = /*#__PURE__*/function (_BaseComponent) {
         files = Array.prototype.slice.call(files, 0, 1);
       }
 
-      if (this.component.storage && files && files.length) {
+      if (files && files.length) {
         // files is not really an array and does not have a forEach method, so fake it.
 
         /* eslint-disable max-statements */
diff --git a/components/textarea/TextArea.js b/components/textarea/TextArea.js
index 03bfd62..074e599 100644
--- a/components/textarea/TextArea.js
+++ b/components/textarea/TextArea.js
@@ -398,7 +398,6 @@ var TextAreaComponent = /*#__PURE__*/function (_TextFieldComponent) {
           // This change solves an issue where the change event was erroneously firing.
           // This also negates the need for the "value" parameter, but I am keeping that there for reverse compatibility,
           // and ensure any extended classes do not break.
-          value = _this6.dataValue;
           _this6.autoModified = flags && flags.autoModified || (_lodash.default.isNil(_this6.autoModified) ? true : _this6.autoModified);
 
           if (!skipSetting || flags && flags.autoModified) {
@@ -561,7 +560,6 @@ var TextAreaComponent = /*#__PURE__*/function (_TextFieldComponent) {
       }
 
       this.addEventListener(textarea, 'input', update);
-      this.on('initialized', update);
       this.updateSize = update;
       update();
     }
