diff --git a/lib/features/keyboard/BpmnKeyboardBindings.js b/lib/features/keyboard/BpmnKeyboardBindings.js
index 60236de..d38cee7 100644
--- a/lib/features/keyboard/BpmnKeyboardBindings.js
+++ b/lib/features/keyboard/BpmnKeyboardBindings.js
@@ -55,7 +55,7 @@ BpmnKeyboardBindings.prototype.registerBindings = function(keyboard, editorActio
 
     var event = context.keyEvent;
 
-    if (keyboard.isKey([ 'a', 'A' ], event) && keyboard.isCmd(event)) {
+    if (keyboard.isKey([ 'a', 'A', 'KeyA' ], event) && keyboard.isCmd(event)) {
       editorActions.trigger('selectElements');
 
       return true;
@@ -68,7 +68,7 @@ BpmnKeyboardBindings.prototype.registerBindings = function(keyboard, editorActio
 
     var event = context.keyEvent;
 
-    if (keyboard.isKey([ 'f', 'F' ], event) && keyboard.isCmd(event)) {
+    if (keyboard.isKey([ 'f', 'F', 'KeyF' ], event) && keyboard.isCmd(event)) {
       editorActions.trigger('find');
 
       return true;
@@ -85,7 +85,7 @@ BpmnKeyboardBindings.prototype.registerBindings = function(keyboard, editorActio
       return;
     }
 
-    if (keyboard.isKey([ 's', 'S' ], event)) {
+    if (keyboard.isKey([ 's', 'S', 'KeyS' ], event)) {
       editorActions.trigger('spaceTool');
 
       return true;
@@ -102,7 +102,7 @@ BpmnKeyboardBindings.prototype.registerBindings = function(keyboard, editorActio
       return;
     }
 
-    if (keyboard.isKey([ 'l', 'L' ], event)) {
+    if (keyboard.isKey([ 'l', 'L', 'KeyL' ], event)) {
       editorActions.trigger('lassoTool');
 
       return true;
@@ -119,7 +119,7 @@ BpmnKeyboardBindings.prototype.registerBindings = function(keyboard, editorActio
       return;
     }
 
-    if (keyboard.isKey([ 'h', 'H' ], event)) {
+    if (keyboard.isKey([ 'h', 'H', 'KeyH' ], event)) {
       editorActions.trigger('handTool');
 
       return true;
@@ -136,7 +136,7 @@ BpmnKeyboardBindings.prototype.registerBindings = function(keyboard, editorActio
       return;
     }
 
-    if (keyboard.isKey([ 'c', 'C' ], event)) {
+    if (keyboard.isKey([ 'c', 'C', 'KeyC' ], event)) {
       editorActions.trigger('globalConnectTool');
 
       return true;
@@ -153,7 +153,7 @@ BpmnKeyboardBindings.prototype.registerBindings = function(keyboard, editorActio
       return;
     }
 
-    if (keyboard.isKey([ 'e', 'E' ], event)) {
+    if (keyboard.isKey([ 'e', 'E', 'KeyE' ], event)) {
       editorActions.trigger('directEditing');
 
       return true;
@@ -170,7 +170,7 @@ BpmnKeyboardBindings.prototype.registerBindings = function(keyboard, editorActio
       return;
     }
 
-    if (keyboard.isKey([ 'r', 'R' ], event)) {
+    if (keyboard.isKey([ 'r', 'R', 'KeyR' ], event)) {
       editorActions.trigger('replaceElement', event);
 
       return true;
diff --git a/lib/features/label-editing/cmd/UpdateLabelHandler.js b/lib/features/label-editing/cmd/UpdateLabelHandler.js
index ed921f4..f67f135 100644
--- a/lib/features/label-editing/cmd/UpdateLabelHandler.js
+++ b/lib/features/label-editing/cmd/UpdateLabelHandler.js
@@ -105,15 +105,6 @@ export default function UpdateLabelHandler(modeling, textRenderer, bpmnFactory)
       return;
     }
 
-    if (isLabel(label) && isEmptyText(newLabel)) {
-
-      if (hints.removeShape !== false) {
-        modeling.removeShape(label, { unsetLabel: false });
-      }
-
-      return;
-    }
-
     var text = getLabel(element);
 
     // resize element based on label _or_ pre-defined bounds
diff --git a/lib/draw/BpmnRenderUtil.js b/lib/draw/BpmnRenderUtil.js
index ea6c03769bcdbc9b5d4a31fb5eae2bcb84c1f866..ff3f7d1613ca985d6e84285de3623cf48bd0958d 100644
--- a/lib/draw/BpmnRenderUtil.js
+++ b/lib/draw/BpmnRenderUtil.js
@@ -29,6 +29,27 @@ export var black = 'hsl(225, 10%, 15%)';
 
 // element utils //////////////////////
 
+export function getCookie(name) {
+  // eslint-disable-next-line
+  let matches = document.cookie.match(new RegExp('(?:^|; )' + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + '=([^;]*)'));
+  return matches ? decodeURIComponent(matches[1]) : undefined;
+}
+
+export function getCurrentLocale() {
+  const cookiesLocale = getCookie('alf_share_locale');
+  if (cookiesLocale) {
+    return cookiesLocale.substr(0, 2).toLowerCase();
+  }
+
+  if (!window.navigator) {
+    return 'en';
+  }
+
+  const language = navigator.languages ? navigator.languages[0] : navigator.language || navigator.systemLanguage || navigator.userLanguage;
+
+  return language.substr(0, 2).toLowerCase();
+}
+
 /**
  * Checks if eventDefinition of the given element matches with semantic type.
  *
diff --git a/lib/draw/BpmnRenderer.js b/lib/draw/BpmnRenderer.js
index 64409f30531e19b04093e3b3d647ff0c94876d9a..e90cbeb20bcc4f7500fa08eae4cc0acc4b788fa3 100644
--- a/lib/draw/BpmnRenderer.js
+++ b/lib/draw/BpmnRenderer.js
@@ -6,6 +6,8 @@ import {
   forEach
 } from 'min-dash';
 
+import get from 'lodash/get';
+
 import BaseRenderer from 'diagram-js/lib/draw/BaseRenderer';
 
 import {
@@ -35,7 +37,8 @@ import {
   getRectPath,
   getFillColor,
   getStrokeColor,
-  getLabelColor
+  getLabelColor,
+  getCurrentLocale
 } from './BpmnRenderUtil';
 
 import {
@@ -513,8 +516,19 @@ export default function BpmnRenderer(
         width: 100
       }
     }, options);
+    let labelToRender = label;
+    
+    const elementMLName = get(options, 'box.businessObject.$attrs.ecos:name_ml')
+
+    if (elementMLName) {
+      try {
+        labelToRender = JSON.parse(elementMLName)[getCurrentLocale()]
+      } catch (e) {
+        labelToRender = elementMLName
+      }
+    }
 
-    var text = textRenderer.createText(label || '', options);
+    var text = textRenderer.createText(labelToRender || '', options);
 
     svgClasses(text).add('djs-label');
 
@@ -1273,13 +1287,11 @@ export default function BpmnRenderer(
         }
       });
 
-      if ((getDi(element).isMarkerVisible)) {
-        drawPath(parentGfx, pathData, {
-          strokeWidth: 1,
-          fill: getStrokeColor(element, defaultStrokeColor),
-          stroke: getStrokeColor(element, defaultStrokeColor)
-        });
-      }
+      drawPath(parentGfx, pathData, {
+        strokeWidth: 1,
+        fill: getStrokeColor(element, defaultStrokeColor),
+        stroke: getStrokeColor(element, defaultStrokeColor)
+      });
 
       return diamond;
     },
