import { EditorThemeClasses } from 'lexical/LexicalEditor';
import './style.scss';

export const defaultTheme: EditorThemeClasses = {
  list: {
    checklist: 'PlaygroundEditorTheme__checklist',
    listitem: 'PlaygroundEditorTheme__listItem',
    listitemChecked: 'PlaygroundEditorTheme__listItemChecked',
    listitemUnchecked: 'PlaygroundEditorTheme__listItemUnchecked',
    nested: {
      listitem: 'rt-editor-theme__nested-list-item',
      list: undefined,
    },
    olDepth: ['rt-editor-theme__ol1', 'rt-editor-theme__ol2', 'rt-editor-theme__ol3', 'rt-editor-theme__ol4', 'rt-editor-theme__ol5'],
    ul: 'rt-editor-theme__ul',
    ulDepth: undefined,
    ol: undefined,
  },
  text: {
    bold: 'rt-editor-theme__text_bold',
    italic: 'rt-editor-theme__text_italic',
    strikethrough: 'rt-editor-theme__text_strike-through',
    underline: 'rt-editor-theme__text_underline',
    underlineStrikethrough: 'rt-editor-theme__text_underline-strike-through',
    subscript: 'rt-editor-theme__text_subscript',
    superscript: 'rt-editor-theme__text_superscript',
    code: 'rt-editor-theme__tex_code',
    base: 'PlaygroundEditorTheme__embedBlock',
    capitalize: 'PlaygroundEditorTheme__textCapitalize',
    highlight: 'PlaygroundEditorTheme__textHighlight',
    lowercase: 'PlaygroundEditorTheme__textLowercase',
    uppercase: 'PlaygroundEditorTheme__textUppercase',
  },
  table: 'rt-editor-theme__table',
  tableAddColumns: 'rt-editor-theme__tableAddColumns',
  tableAddRows: 'rt-editor-theme__tableAddRows',
  tableCell: 'rt-editor-theme__tableCell',
  tableCellActionButton: 'rt-editor-theme__tableCellActionButton',
  tableCellActionButtonContainer: 'rt-editor-theme__tableCellActionButtonContainer',
  tableCellEditing: 'rt-editor-theme__tableCellEditing',
  tableCellHeader: 'rt-editor-theme__tableCellHeader',
  tableCellPrimarySelected: 'rt-editor-theme__tableCellPrimarySelected',
  tableCellResizer: 'rt-editor-theme__tableCellResizer',
  tableCellSelected: 'rt-editor-theme__tableCellSelected',
  tableCellSortedIndicator: 'rt-editor-theme__tableCellSortedIndicator',
  tableResizeRuler: 'rt-editor-theme__tableCellResizeRuler',
  tableSelected: 'rt-editor-theme__tableSelected',
  tableSelection: 'rt-editor-theme__tableSelection',
  blockCursor: 'PlaygroundEditorTheme__blockCursor',
  characterLimit: 'PlaygroundEditorTheme__characterLimit',
  code: 'PlaygroundEditorTheme__code',
  codeHighlight: {
    atrule: 'PlaygroundEditorTheme__tokenAttr',
    attr: 'PlaygroundEditorTheme__tokenAttr',
    boolean: 'PlaygroundEditorTheme__tokenProperty',
    builtin: 'PlaygroundEditorTheme__tokenSelector',
    cdata: 'PlaygroundEditorTheme__tokenComment',
    char: 'PlaygroundEditorTheme__tokenSelector',
    class: 'PlaygroundEditorTheme__tokenFunction',
    'class-name': 'PlaygroundEditorTheme__tokenFunction',
    comment: 'PlaygroundEditorTheme__tokenComment',
    constant: 'PlaygroundEditorTheme__tokenProperty',
    deleted: 'PlaygroundEditorTheme__tokenProperty',
    doctype: 'PlaygroundEditorTheme__tokenComment',
    entity: 'PlaygroundEditorTheme__tokenOperator',
    function: 'PlaygroundEditorTheme__tokenFunction',
    important: 'PlaygroundEditorTheme__tokenVariable',
    inserted: 'PlaygroundEditorTheme__tokenSelector',
    keyword: 'PlaygroundEditorTheme__tokenAttr',
    namespace: 'PlaygroundEditorTheme__tokenVariable',
    number: 'PlaygroundEditorTheme__tokenProperty',
    operator: 'PlaygroundEditorTheme__tokenOperator',
    prolog: 'PlaygroundEditorTheme__tokenComment',
    property: 'PlaygroundEditorTheme__tokenProperty',
    punctuation: 'PlaygroundEditorTheme__tokenPunctuation',
    regex: 'PlaygroundEditorTheme__tokenVariable',
    selector: 'PlaygroundEditorTheme__tokenSelector',
    string: 'PlaygroundEditorTheme__tokenSelector',
    symbol: 'PlaygroundEditorTheme__tokenProperty',
    tag: 'PlaygroundEditorTheme__tokenProperty',
    url: 'PlaygroundEditorTheme__tokenOperator',
    variable: 'PlaygroundEditorTheme__tokenVariable',
  },
  embedBlock: {
    base: 'PlaygroundEditorTheme__embedBlock',
    focus: 'PlaygroundEditorTheme__embedBlockFocus',
  },
  hashtag: 'PlaygroundEditorTheme__hashtag',
  heading: {
    h1: 'PlaygroundEditorTheme__h1',
    h2: 'PlaygroundEditorTheme__h2',
    h3: 'PlaygroundEditorTheme__h3',
    h4: 'PlaygroundEditorTheme__h4',
    h5: 'PlaygroundEditorTheme__h5',
    h6: 'PlaygroundEditorTheme__h6',
  },
  image: 'PlaygroundEditorTheme__image',
  indent: 'PlaygroundEditorTheme__indent',
  link: 'PlaygroundEditorTheme__link',
  ltr: 'PlaygroundEditorTheme__ltr',
  mark: 'PlaygroundEditorTheme__mark',
  markOverlap: 'PlaygroundEditorTheme__markOverlap',
  paragraph: 'PlaygroundEditorTheme__paragraph',
  quote: 'PlaygroundEditorTheme__quote',
  rtl: 'PlaygroundEditorTheme__rtl',
  autocomplete: 'PlaygroundEditorTheme__autocomplete',
  hr: 'PlaygroundEditorTheme__hr',
  inlineImage: 'inline-editor-image',
  layoutContainer: 'PlaygroundEditorTheme__layoutContainer',
  layoutItem: 'PlaygroundEditorTheme__layoutItem',
  specialText: 'PlaygroundEditorTheme__specialText',
  tab: 'PlaygroundEditorTheme__tabNode',
  tableAlignment: {
    center: 'PlaygroundEditorTheme__tableAlignmentCenter',
    right: 'PlaygroundEditorTheme__tableAlignmentRight',
  },
  tableFrozenColumn: 'PlaygroundEditorTheme__tableFrozenColumn',
  tableFrozenRow: 'PlaygroundEditorTheme__tableFrozenRow',
  tableRowStriping: 'PlaygroundEditorTheme__tableRowStriping',
  tableScrollableWrapper: 'PlaygroundEditorTheme__tableScrollableWrapper',
};
